/*
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Client;
import java.io.File;
import org.openapitools.client.model.FileSchemaTestClass;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.OuterComposite;
import org.openapitools.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FakeApi {
    private ApiClient apiClient;

    public FakeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FakeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    private com.squareup.okhttp.Call fakeOuterBooleanSerializeCall(Boolean body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/fake/outer/boolean";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fakeOuterBooleanSerializeValidateBeforeCall(Boolean body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = fakeOuterBooleanSerializeCall(body, progressListener, progressRequestListener);
        return call;

    }


    private ApiResponse<Boolean> fakeOuterBooleanSerializeWithHttpInfo(Boolean body) throws ApiException {
        com.squareup.okhttp.Call call = fakeOuterBooleanSerializeValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    private com.squareup.okhttp.Call fakeOuterBooleanSerializeAsync(Boolean body, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fakeOuterBooleanSerializeValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    public class APIfakeOuterBooleanSerializeRequest {
        private Boolean body;

        private APIfakeOuterBooleanSerializeRequest() {
        }

        /**
         * Set body
         * @param body Input boolean as post body (optional)
         * @return APIfakeOuterBooleanSerializeRequest
         */
        public APIfakeOuterBooleanSerializeRequest body(Boolean body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for fakeOuterBooleanSerialize
         * @param progressListener Progress listener
         * @param progressRequestListener Progress request listener
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public com.squareup.okhttp.Call buildCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
            return fakeOuterBooleanSerializeCall(body, progressListener, progressRequestListener);
        }

        /**
         * Execute fakeOuterBooleanSerialize request
         * @return Boolean
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public Boolean execute() throws ApiException {
            ApiResponse<Boolean> resp = fakeOuterBooleanSerializeWithHttpInfo(body);
            return resp.getData();
        }

        /**
         * Execute fakeOuterBooleanSerialize request with HTTP info returned
         * @return ApiResponse&lt;Boolean&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<Boolean> executeWithHttpInfo() throws ApiException {
            return fakeOuterBooleanSerializeWithHttpInfo(body);
        }

        /**
         * Execute fakeOuterBooleanSerialize request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public com.squareup.okhttp.Call executeAsync(final ApiCallback<Boolean> callback) throws ApiException {
            return fakeOuterBooleanSerializeAsync(body, callback);
        }
    }

    /**
     * 
     * Test serialization of outer boolean types
     * @return APIfakeOuterBooleanSerializeRequest
     */
    public APIfakeOuterBooleanSerializeRequest fakeOuterBooleanSerialize() {
        return new APIfakeOuterBooleanSerializeRequest();
    }
    private com.squareup.okhttp.Call fakeOuterCompositeSerializeCall(OuterComposite outerComposite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = outerComposite;

        // create path and map variables
        String localVarPath = "/fake/outer/composite";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fakeOuterCompositeSerializeValidateBeforeCall(OuterComposite outerComposite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = fakeOuterCompositeSerializeCall(outerComposite, progressListener, progressRequestListener);
        return call;

    }


    private ApiResponse<OuterComposite> fakeOuterCompositeSerializeWithHttpInfo(OuterComposite outerComposite) throws ApiException {
        com.squareup.okhttp.Call call = fakeOuterCompositeSerializeValidateBeforeCall(outerComposite, null, null);
        Type localVarReturnType = new TypeToken<OuterComposite>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    private com.squareup.okhttp.Call fakeOuterCompositeSerializeAsync(OuterComposite outerComposite, final ApiCallback<OuterComposite> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fakeOuterCompositeSerializeValidateBeforeCall(outerComposite, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OuterComposite>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    public class APIfakeOuterCompositeSerializeRequest {
        private OuterComposite outerComposite;

        private APIfakeOuterCompositeSerializeRequest() {
        }

        /**
         * Set outerComposite
         * @param outerComposite Input composite as post body (optional)
         * @return APIfakeOuterCompositeSerializeRequest
         */
        public APIfakeOuterCompositeSerializeRequest outerComposite(OuterComposite outerComposite) {
            this.outerComposite = outerComposite;
            return this;
        }

        /**
         * Build call for fakeOuterCompositeSerialize
         * @param progressListener Progress listener
         * @param progressRequestListener Progress request listener
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public com.squareup.okhttp.Call buildCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
            return fakeOuterCompositeSerializeCall(outerComposite, progressListener, progressRequestListener);
        }

        /**
         * Execute fakeOuterCompositeSerialize request
         * @return OuterComposite
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public OuterComposite execute() throws ApiException {
            ApiResponse<OuterComposite> resp = fakeOuterCompositeSerializeWithHttpInfo(outerComposite);
            return resp.getData();
        }

        /**
         * Execute fakeOuterCompositeSerialize request with HTTP info returned
         * @return ApiResponse&lt;OuterComposite&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<OuterComposite> executeWithHttpInfo() throws ApiException {
            return fakeOuterCompositeSerializeWithHttpInfo(outerComposite);
        }

        /**
         * Execute fakeOuterCompositeSerialize request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public com.squareup.okhttp.Call executeAsync(final ApiCallback<OuterComposite> callback) throws ApiException {
            return fakeOuterCompositeSerializeAsync(outerComposite, callback);
        }
    }

    /**
     * 
     * Test serialization of object with outer number type
     * @return APIfakeOuterCompositeSerializeRequest
     */
    public APIfakeOuterCompositeSerializeRequest fakeOuterCompositeSerialize() {
        return new APIfakeOuterCompositeSerializeRequest();
    }
    private com.squareup.okhttp.Call fakeOuterNumberSerializeCall(BigDecimal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/fake/outer/number";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fakeOuterNumberSerializeValidateBeforeCall(BigDecimal body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = fakeOuterNumberSerializeCall(body, progressListener, progressRequestListener);
        return call;

    }


    private ApiResponse<BigDecimal> fakeOuterNumberSerializeWithHttpInfo(BigDecimal body) throws ApiException {
        com.squareup.okhttp.Call call = fakeOuterNumberSerializeValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    private com.squareup.okhttp.Call fakeOuterNumberSerializeAsync(BigDecimal body, final ApiCallback<BigDecimal> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fakeOuterNumberSerializeValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    public class APIfakeOuterNumberSerializeRequest {
        private BigDecimal body;

        private APIfakeOuterNumberSerializeRequest() {
        }

        /**
         * Set body
         * @param body Input number as post body (optional)
         * @return APIfakeOuterNumberSerializeRequest
         */
        public APIfakeOuterNumberSerializeRequest body(BigDecimal body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for fakeOuterNumberSerialize
         * @param progressListener Progress listener
         * @param progressRequestListener Progress request listener
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public com.squareup.okhttp.Call buildCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
            return fakeOuterNumberSerializeCall(body, progressListener, progressRequestListener);
        }

        /**
         * Execute fakeOuterNumberSerialize request
         * @return BigDecimal
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public BigDecimal execute() throws ApiException {
            ApiResponse<BigDecimal> resp = fakeOuterNumberSerializeWithHttpInfo(body);
            return resp.getData();
        }

        /**
         * Execute fakeOuterNumberSerialize request with HTTP info returned
         * @return ApiResponse&lt;BigDecimal&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<BigDecimal> executeWithHttpInfo() throws ApiException {
            return fakeOuterNumberSerializeWithHttpInfo(body);
        }

        /**
         * Execute fakeOuterNumberSerialize request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public com.squareup.okhttp.Call executeAsync(final ApiCallback<BigDecimal> callback) throws ApiException {
            return fakeOuterNumberSerializeAsync(body, callback);
        }
    }

    /**
     * 
     * Test serialization of outer number types
     * @return APIfakeOuterNumberSerializeRequest
     */
    public APIfakeOuterNumberSerializeRequest fakeOuterNumberSerialize() {
        return new APIfakeOuterNumberSerializeRequest();
    }
    private com.squareup.okhttp.Call fakeOuterStringSerializeCall(String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/fake/outer/string";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fakeOuterStringSerializeValidateBeforeCall(String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = fakeOuterStringSerializeCall(body, progressListener, progressRequestListener);
        return call;

    }


    private ApiResponse<String> fakeOuterStringSerializeWithHttpInfo(String body) throws ApiException {
        com.squareup.okhttp.Call call = fakeOuterStringSerializeValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    private com.squareup.okhttp.Call fakeOuterStringSerializeAsync(String body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fakeOuterStringSerializeValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    public class APIfakeOuterStringSerializeRequest {
        private String body;

        private APIfakeOuterStringSerializeRequest() {
        }

        /**
         * Set body
         * @param body Input string as post body (optional)
         * @return APIfakeOuterStringSerializeRequest
         */
        public APIfakeOuterStringSerializeRequest body(String body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for fakeOuterStringSerialize
         * @param progressListener Progress listener
         * @param progressRequestListener Progress request listener
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public com.squareup.okhttp.Call buildCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
            return fakeOuterStringSerializeCall(body, progressListener, progressRequestListener);
        }

        /**
         * Execute fakeOuterStringSerialize request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public String execute() throws ApiException {
            ApiResponse<String> resp = fakeOuterStringSerializeWithHttpInfo(body);
            return resp.getData();
        }

        /**
         * Execute fakeOuterStringSerialize request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return fakeOuterStringSerializeWithHttpInfo(body);
        }

        /**
         * Execute fakeOuterStringSerialize request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public com.squareup.okhttp.Call executeAsync(final ApiCallback<String> callback) throws ApiException {
            return fakeOuterStringSerializeAsync(body, callback);
        }
    }

    /**
     * 
     * Test serialization of outer string types
     * @return APIfakeOuterStringSerializeRequest
     */
    public APIfakeOuterStringSerializeRequest fakeOuterStringSerialize() {
        return new APIfakeOuterStringSerializeRequest();
    }
    private com.squareup.okhttp.Call testBodyWithFileSchemaCall(FileSchemaTestClass fileSchemaTestClass, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fileSchemaTestClass;

        // create path and map variables
        String localVarPath = "/fake/body-with-file-schema";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call testBodyWithFileSchemaValidateBeforeCall(FileSchemaTestClass fileSchemaTestClass, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fileSchemaTestClass' is set
        if (fileSchemaTestClass == null) {
            throw new ApiException("Missing the required parameter 'fileSchemaTestClass' when calling testBodyWithFileSchema(Async)");
        }
        

        com.squareup.okhttp.Call call = testBodyWithFileSchemaCall(fileSchemaTestClass, progressListener, progressRequestListener);
        return call;

    }


    private ApiResponse<Void> testBodyWithFileSchemaWithHttpInfo(FileSchemaTestClass fileSchemaTestClass) throws ApiException {
        com.squareup.okhttp.Call call = testBodyWithFileSchemaValidateBeforeCall(fileSchemaTestClass, null, null);
        return apiClient.execute(call);
    }

    private com.squareup.okhttp.Call testBodyWithFileSchemaAsync(FileSchemaTestClass fileSchemaTestClass, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = testBodyWithFileSchemaValidateBeforeCall(fileSchemaTestClass, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    public class APItestBodyWithFileSchemaRequest {
        private final FileSchemaTestClass fileSchemaTestClass;

        private APItestBodyWithFileSchemaRequest(FileSchemaTestClass fileSchemaTestClass) {
            this.fileSchemaTestClass = fileSchemaTestClass;
        }

        /**
         * Build call for testBodyWithFileSchema
         * @param progressListener Progress listener
         * @param progressRequestListener Progress request listener
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public com.squareup.okhttp.Call buildCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
            return testBodyWithFileSchemaCall(fileSchemaTestClass, progressListener, progressRequestListener);
        }

        /**
         * Execute testBodyWithFileSchema request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public void execute() throws ApiException {
            testBodyWithFileSchemaWithHttpInfo(fileSchemaTestClass);
        }

        /**
         * Execute testBodyWithFileSchema request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return testBodyWithFileSchemaWithHttpInfo(fileSchemaTestClass);
        }

        /**
         * Execute testBodyWithFileSchema request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public com.squareup.okhttp.Call executeAsync(final ApiCallback<Void> callback) throws ApiException {
            return testBodyWithFileSchemaAsync(fileSchemaTestClass, callback);
        }
    }

    /**
     * 
     * For this test, the body for this request much reference a schema named &#x60;File&#x60;.
     * @param fileSchemaTestClass  (required)
     * @return APItestBodyWithFileSchemaRequest
     */
    public APItestBodyWithFileSchemaRequest testBodyWithFileSchema(FileSchemaTestClass fileSchemaTestClass) {
        return new APItestBodyWithFileSchemaRequest(fileSchemaTestClass);
    }
    private com.squareup.okhttp.Call testBodyWithQueryParamsCall(String query, User user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/fake/body-with-query-params";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("query", query));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call testBodyWithQueryParamsValidateBeforeCall(String query, User user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling testBodyWithQueryParams(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling testBodyWithQueryParams(Async)");
        }
        

        com.squareup.okhttp.Call call = testBodyWithQueryParamsCall(query, user, progressListener, progressRequestListener);
        return call;

    }


    private ApiResponse<Void> testBodyWithQueryParamsWithHttpInfo(String query, User user) throws ApiException {
        com.squareup.okhttp.Call call = testBodyWithQueryParamsValidateBeforeCall(query, user, null, null);
        return apiClient.execute(call);
    }

    private com.squareup.okhttp.Call testBodyWithQueryParamsAsync(String query, User user, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = testBodyWithQueryParamsValidateBeforeCall(query, user, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    public class APItestBodyWithQueryParamsRequest {
        private final String query;
        private final User user;

        private APItestBodyWithQueryParamsRequest(String query, User user) {
            this.query = query;
            this.user = user;
        }

        /**
         * Build call for testBodyWithQueryParams
         * @param progressListener Progress listener
         * @param progressRequestListener Progress request listener
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public com.squareup.okhttp.Call buildCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
            return testBodyWithQueryParamsCall(query, user, progressListener, progressRequestListener);
        }

        /**
         * Execute testBodyWithQueryParams request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public void execute() throws ApiException {
            testBodyWithQueryParamsWithHttpInfo(query, user);
        }

        /**
         * Execute testBodyWithQueryParams request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return testBodyWithQueryParamsWithHttpInfo(query, user);
        }

        /**
         * Execute testBodyWithQueryParams request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public com.squareup.okhttp.Call executeAsync(final ApiCallback<Void> callback) throws ApiException {
            return testBodyWithQueryParamsAsync(query, user, callback);
        }
    }

    /**
     * 
     * 
     * @param query  (required)
     * @param user  (required)
     * @return APItestBodyWithQueryParamsRequest
     */
    public APItestBodyWithQueryParamsRequest testBodyWithQueryParams(String query, User user) {
        return new APItestBodyWithQueryParamsRequest(query, user);
    }
    private com.squareup.okhttp.Call testClientModelCall(Client client, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = client;

        // create path and map variables
        String localVarPath = "/fake";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call testClientModelValidateBeforeCall(Client client, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling testClientModel(Async)");
        }
        

        com.squareup.okhttp.Call call = testClientModelCall(client, progressListener, progressRequestListener);
        return call;

    }


    private ApiResponse<Client> testClientModelWithHttpInfo(Client client) throws ApiException {
        com.squareup.okhttp.Call call = testClientModelValidateBeforeCall(client, null, null);
        Type localVarReturnType = new TypeToken<Client>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    private com.squareup.okhttp.Call testClientModelAsync(Client client, final ApiCallback<Client> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = testClientModelValidateBeforeCall(client, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Client>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    public class APItestClientModelRequest {
        private final Client client;

        private APItestClientModelRequest(Client client) {
            this.client = client;
        }

        /**
         * Build call for testClientModel
         * @param progressListener Progress listener
         * @param progressRequestListener Progress request listener
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public com.squareup.okhttp.Call buildCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
            return testClientModelCall(client, progressListener, progressRequestListener);
        }

        /**
         * Execute testClientModel request
         * @return Client
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public Client execute() throws ApiException {
            ApiResponse<Client> resp = testClientModelWithHttpInfo(client);
            return resp.getData();
        }

        /**
         * Execute testClientModel request with HTTP info returned
         * @return ApiResponse&lt;Client&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<Client> executeWithHttpInfo() throws ApiException {
            return testClientModelWithHttpInfo(client);
        }

        /**
         * Execute testClientModel request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public com.squareup.okhttp.Call executeAsync(final ApiCallback<Client> callback) throws ApiException {
            return testClientModelAsync(client, callback);
        }
    }

    /**
     * To test \&quot;client\&quot; model
     * To test \&quot;client\&quot; model
     * @param client client model (required)
     * @return APItestClientModelRequest
     */
    public APItestClientModelRequest testClientModel(Client client) {
        return new APItestClientModelRequest(client);
    }
    private com.squareup.okhttp.Call testEndpointParametersCall(BigDecimal number, Double _double, String patternWithoutDelimiter, byte[] _byte, Integer integer, Integer int32, Long int64, Float _float, String string, File binary, LocalDate date, OffsetDateTime dateTime, String password, String paramCallback, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/fake";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (integer != null) {
            localVarFormParams.put("integer", integer);
        }

        if (int32 != null) {
            localVarFormParams.put("int32", int32);
        }

        if (int64 != null) {
            localVarFormParams.put("int64", int64);
        }

        if (number != null) {
            localVarFormParams.put("number", number);
        }

        if (_float != null) {
            localVarFormParams.put("float", _float);
        }

        if (_double != null) {
            localVarFormParams.put("double", _double);
        }

        if (string != null) {
            localVarFormParams.put("string", string);
        }

        if (patternWithoutDelimiter != null) {
            localVarFormParams.put("pattern_without_delimiter", patternWithoutDelimiter);
        }

        if (_byte != null) {
            localVarFormParams.put("byte", _byte);
        }

        if (binary != null) {
            localVarFormParams.put("binary", binary);
        }

        if (date != null) {
            localVarFormParams.put("date", date);
        }

        if (dateTime != null) {
            localVarFormParams.put("dateTime", dateTime);
        }

        if (password != null) {
            localVarFormParams.put("password", password);
        }

        if (paramCallback != null) {
            localVarFormParams.put("callback", paramCallback);
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "http_basic_test" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call testEndpointParametersValidateBeforeCall(BigDecimal number, Double _double, String patternWithoutDelimiter, byte[] _byte, Integer integer, Integer int32, Long int64, Float _float, String string, File binary, LocalDate date, OffsetDateTime dateTime, String password, String paramCallback, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling testEndpointParameters(Async)");
        }
        
        // verify the required parameter '_double' is set
        if (_double == null) {
            throw new ApiException("Missing the required parameter '_double' when calling testEndpointParameters(Async)");
        }
        
        // verify the required parameter 'patternWithoutDelimiter' is set
        if (patternWithoutDelimiter == null) {
            throw new ApiException("Missing the required parameter 'patternWithoutDelimiter' when calling testEndpointParameters(Async)");
        }
        
        // verify the required parameter '_byte' is set
        if (_byte == null) {
            throw new ApiException("Missing the required parameter '_byte' when calling testEndpointParameters(Async)");
        }
        

        com.squareup.okhttp.Call call = testEndpointParametersCall(number, _double, patternWithoutDelimiter, _byte, integer, int32, int64, _float, string, binary, date, dateTime, password, paramCallback, progressListener, progressRequestListener);
        return call;

    }


    private ApiResponse<Void> testEndpointParametersWithHttpInfo(BigDecimal number, Double _double, String patternWithoutDelimiter, byte[] _byte, Integer integer, Integer int32, Long int64, Float _float, String string, File binary, LocalDate date, OffsetDateTime dateTime, String password, String paramCallback) throws ApiException {
        com.squareup.okhttp.Call call = testEndpointParametersValidateBeforeCall(number, _double, patternWithoutDelimiter, _byte, integer, int32, int64, _float, string, binary, date, dateTime, password, paramCallback, null, null);
        return apiClient.execute(call);
    }

    private com.squareup.okhttp.Call testEndpointParametersAsync(BigDecimal number, Double _double, String patternWithoutDelimiter, byte[] _byte, Integer integer, Integer int32, Long int64, Float _float, String string, File binary, LocalDate date, OffsetDateTime dateTime, String password, String paramCallback, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = testEndpointParametersValidateBeforeCall(number, _double, patternWithoutDelimiter, _byte, integer, int32, int64, _float, string, binary, date, dateTime, password, paramCallback, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    public class APItestEndpointParametersRequest {
        private final BigDecimal number;
        private final Double _double;
        private final String patternWithoutDelimiter;
        private final byte[] _byte;
        private Integer integer;
        private Integer int32;
        private Long int64;
        private Float _float;
        private String string;
        private File binary;
        private LocalDate date;
        private OffsetDateTime dateTime;
        private String password;
        private String paramCallback;

        private APItestEndpointParametersRequest(BigDecimal number, Double _double, String patternWithoutDelimiter, byte[] _byte) {
            this.number = number;
            this._double = _double;
            this.patternWithoutDelimiter = patternWithoutDelimiter;
            this._byte = _byte;
        }

        /**
         * Set integer
         * @param integer None (optional)
         * @return APItestEndpointParametersRequest
         */
        public APItestEndpointParametersRequest integer(Integer integer) {
            this.integer = integer;
            return this;
        }

        /**
         * Set int32
         * @param int32 None (optional)
         * @return APItestEndpointParametersRequest
         */
        public APItestEndpointParametersRequest int32(Integer int32) {
            this.int32 = int32;
            return this;
        }

        /**
         * Set int64
         * @param int64 None (optional)
         * @return APItestEndpointParametersRequest
         */
        public APItestEndpointParametersRequest int64(Long int64) {
            this.int64 = int64;
            return this;
        }

        /**
         * Set _float
         * @param _float None (optional)
         * @return APItestEndpointParametersRequest
         */
        public APItestEndpointParametersRequest _float(Float _float) {
            this._float = _float;
            return this;
        }

        /**
         * Set string
         * @param string None (optional)
         * @return APItestEndpointParametersRequest
         */
        public APItestEndpointParametersRequest string(String string) {
            this.string = string;
            return this;
        }

        /**
         * Set binary
         * @param binary None (optional)
         * @return APItestEndpointParametersRequest
         */
        public APItestEndpointParametersRequest binary(File binary) {
            this.binary = binary;
            return this;
        }

        /**
         * Set date
         * @param date None (optional)
         * @return APItestEndpointParametersRequest
         */
        public APItestEndpointParametersRequest date(LocalDate date) {
            this.date = date;
            return this;
        }

        /**
         * Set dateTime
         * @param dateTime None (optional)
         * @return APItestEndpointParametersRequest
         */
        public APItestEndpointParametersRequest dateTime(OffsetDateTime dateTime) {
            this.dateTime = dateTime;
            return this;
        }

        /**
         * Set password
         * @param password None (optional)
         * @return APItestEndpointParametersRequest
         */
        public APItestEndpointParametersRequest password(String password) {
            this.password = password;
            return this;
        }

        /**
         * Set paramCallback
         * @param paramCallback None (optional)
         * @return APItestEndpointParametersRequest
         */
        public APItestEndpointParametersRequest paramCallback(String paramCallback) {
            this.paramCallback = paramCallback;
            return this;
        }

        /**
         * Build call for testEndpointParameters
         * @param progressListener Progress listener
         * @param progressRequestListener Progress request listener
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public com.squareup.okhttp.Call buildCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
            return testEndpointParametersCall(number, _double, patternWithoutDelimiter, _byte, integer, int32, int64, _float, string, binary, date, dateTime, password, paramCallback, progressListener, progressRequestListener);
        }

        /**
         * Execute testEndpointParameters request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public void execute() throws ApiException {
            testEndpointParametersWithHttpInfo(number, _double, patternWithoutDelimiter, _byte, integer, int32, int64, _float, string, binary, date, dateTime, password, paramCallback);
        }

        /**
         * Execute testEndpointParameters request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return testEndpointParametersWithHttpInfo(number, _double, patternWithoutDelimiter, _byte, integer, int32, int64, _float, string, binary, date, dateTime, password, paramCallback);
        }

        /**
         * Execute testEndpointParameters request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public com.squareup.okhttp.Call executeAsync(final ApiCallback<Void> callback) throws ApiException {
            return testEndpointParametersAsync(number, _double, patternWithoutDelimiter, _byte, integer, int32, int64, _float, string, binary, date, dateTime, password, paramCallback, callback);
        }
    }

    /**
     * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
     * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
     * @param number None (required)
     * @param _double None (required)
     * @param patternWithoutDelimiter None (required)
     * @param _byte None (required)
     * @return APItestEndpointParametersRequest
     */
    public APItestEndpointParametersRequest testEndpointParameters(BigDecimal number, Double _double, String patternWithoutDelimiter, byte[] _byte) {
        return new APItestEndpointParametersRequest(number, _double, patternWithoutDelimiter, _byte);
    }
    private com.squareup.okhttp.Call testEnumParametersCall(List<String> enumHeaderStringArray, String enumHeaderString, List<String> enumQueryStringArray, String enumQueryString, Integer enumQueryInteger, Double enumQueryDouble, List<String> enumFormStringArray, String enumFormString, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/fake";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (enumQueryStringArray != null) {
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "enum_query_string_array", enumQueryStringArray));
        }

        if (enumQueryString != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("enum_query_string", enumQueryString));
        }

        if (enumQueryInteger != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("enum_query_integer", enumQueryInteger));
        }

        if (enumQueryDouble != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("enum_query_double", enumQueryDouble));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (enumHeaderStringArray != null) {
            localVarHeaderParams.put("enum_header_string_array", apiClient.parameterToString(enumHeaderStringArray));
        }

        if (enumHeaderString != null) {
            localVarHeaderParams.put("enum_header_string", apiClient.parameterToString(enumHeaderString));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (enumFormStringArray != null) {
            localVarFormParams.put("enum_form_string_array", enumFormStringArray);
        }

        if (enumFormString != null) {
            localVarFormParams.put("enum_form_string", enumFormString);
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call testEnumParametersValidateBeforeCall(List<String> enumHeaderStringArray, String enumHeaderString, List<String> enumQueryStringArray, String enumQueryString, Integer enumQueryInteger, Double enumQueryDouble, List<String> enumFormStringArray, String enumFormString, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = testEnumParametersCall(enumHeaderStringArray, enumHeaderString, enumQueryStringArray, enumQueryString, enumQueryInteger, enumQueryDouble, enumFormStringArray, enumFormString, progressListener, progressRequestListener);
        return call;

    }


    private ApiResponse<Void> testEnumParametersWithHttpInfo(List<String> enumHeaderStringArray, String enumHeaderString, List<String> enumQueryStringArray, String enumQueryString, Integer enumQueryInteger, Double enumQueryDouble, List<String> enumFormStringArray, String enumFormString) throws ApiException {
        com.squareup.okhttp.Call call = testEnumParametersValidateBeforeCall(enumHeaderStringArray, enumHeaderString, enumQueryStringArray, enumQueryString, enumQueryInteger, enumQueryDouble, enumFormStringArray, enumFormString, null, null);
        return apiClient.execute(call);
    }

    private com.squareup.okhttp.Call testEnumParametersAsync(List<String> enumHeaderStringArray, String enumHeaderString, List<String> enumQueryStringArray, String enumQueryString, Integer enumQueryInteger, Double enumQueryDouble, List<String> enumFormStringArray, String enumFormString, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = testEnumParametersValidateBeforeCall(enumHeaderStringArray, enumHeaderString, enumQueryStringArray, enumQueryString, enumQueryInteger, enumQueryDouble, enumFormStringArray, enumFormString, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    public class APItestEnumParametersRequest {
        private List<String> enumHeaderStringArray;
        private String enumHeaderString;
        private List<String> enumQueryStringArray;
        private String enumQueryString;
        private Integer enumQueryInteger;
        private Double enumQueryDouble;
        private List<String> enumFormStringArray;
        private String enumFormString;

        private APItestEnumParametersRequest() {
        }

        /**
         * Set enumHeaderStringArray
         * @param enumHeaderStringArray Header parameter enum test (string array) (optional)
         * @return APItestEnumParametersRequest
         */
        public APItestEnumParametersRequest enumHeaderStringArray(List<String> enumHeaderStringArray) {
            this.enumHeaderStringArray = enumHeaderStringArray;
            return this;
        }

        /**
         * Set enumHeaderString
         * @param enumHeaderString Header parameter enum test (string) (optional, default to -efg)
         * @return APItestEnumParametersRequest
         */
        public APItestEnumParametersRequest enumHeaderString(String enumHeaderString) {
            this.enumHeaderString = enumHeaderString;
            return this;
        }

        /**
         * Set enumQueryStringArray
         * @param enumQueryStringArray Query parameter enum test (string array) (optional)
         * @return APItestEnumParametersRequest
         */
        public APItestEnumParametersRequest enumQueryStringArray(List<String> enumQueryStringArray) {
            this.enumQueryStringArray = enumQueryStringArray;
            return this;
        }

        /**
         * Set enumQueryString
         * @param enumQueryString Query parameter enum test (string) (optional, default to -efg)
         * @return APItestEnumParametersRequest
         */
        public APItestEnumParametersRequest enumQueryString(String enumQueryString) {
            this.enumQueryString = enumQueryString;
            return this;
        }

        /**
         * Set enumQueryInteger
         * @param enumQueryInteger Query parameter enum test (double) (optional)
         * @return APItestEnumParametersRequest
         */
        public APItestEnumParametersRequest enumQueryInteger(Integer enumQueryInteger) {
            this.enumQueryInteger = enumQueryInteger;
            return this;
        }

        /**
         * Set enumQueryDouble
         * @param enumQueryDouble Query parameter enum test (double) (optional)
         * @return APItestEnumParametersRequest
         */
        public APItestEnumParametersRequest enumQueryDouble(Double enumQueryDouble) {
            this.enumQueryDouble = enumQueryDouble;
            return this;
        }

        /**
         * Set enumFormStringArray
         * @param enumFormStringArray Form parameter enum test (string array) (optional)
         * @return APItestEnumParametersRequest
         */
        public APItestEnumParametersRequest enumFormStringArray(List<String> enumFormStringArray) {
            this.enumFormStringArray = enumFormStringArray;
            return this;
        }

        /**
         * Set enumFormString
         * @param enumFormString Form parameter enum test (string) (optional, default to -efg)
         * @return APItestEnumParametersRequest
         */
        public APItestEnumParametersRequest enumFormString(String enumFormString) {
            this.enumFormString = enumFormString;
            return this;
        }

        /**
         * Build call for testEnumParameters
         * @param progressListener Progress listener
         * @param progressRequestListener Progress request listener
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public com.squareup.okhttp.Call buildCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
            return testEnumParametersCall(enumHeaderStringArray, enumHeaderString, enumQueryStringArray, enumQueryString, enumQueryInteger, enumQueryDouble, enumFormStringArray, enumFormString, progressListener, progressRequestListener);
        }

        /**
         * Execute testEnumParameters request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public void execute() throws ApiException {
            testEnumParametersWithHttpInfo(enumHeaderStringArray, enumHeaderString, enumQueryStringArray, enumQueryString, enumQueryInteger, enumQueryDouble, enumFormStringArray, enumFormString);
        }

        /**
         * Execute testEnumParameters request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return testEnumParametersWithHttpInfo(enumHeaderStringArray, enumHeaderString, enumQueryStringArray, enumQueryString, enumQueryInteger, enumQueryDouble, enumFormStringArray, enumFormString);
        }

        /**
         * Execute testEnumParameters request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public com.squareup.okhttp.Call executeAsync(final ApiCallback<Void> callback) throws ApiException {
            return testEnumParametersAsync(enumHeaderStringArray, enumHeaderString, enumQueryStringArray, enumQueryString, enumQueryInteger, enumQueryDouble, enumFormStringArray, enumFormString, callback);
        }
    }

    /**
     * To test enum parameters
     * To test enum parameters
     * @return APItestEnumParametersRequest
     */
    public APItestEnumParametersRequest testEnumParameters() {
        return new APItestEnumParametersRequest();
    }
    private com.squareup.okhttp.Call testInlineAdditionalPropertiesCall(Map<String, String> requestBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/fake/inline-additionalProperties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call testInlineAdditionalPropertiesValidateBeforeCall(Map<String, String> requestBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling testInlineAdditionalProperties(Async)");
        }
        

        com.squareup.okhttp.Call call = testInlineAdditionalPropertiesCall(requestBody, progressListener, progressRequestListener);
        return call;

    }


    private ApiResponse<Void> testInlineAdditionalPropertiesWithHttpInfo(Map<String, String> requestBody) throws ApiException {
        com.squareup.okhttp.Call call = testInlineAdditionalPropertiesValidateBeforeCall(requestBody, null, null);
        return apiClient.execute(call);
    }

    private com.squareup.okhttp.Call testInlineAdditionalPropertiesAsync(Map<String, String> requestBody, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = testInlineAdditionalPropertiesValidateBeforeCall(requestBody, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    public class APItestInlineAdditionalPropertiesRequest {
        private final Map<String, String> requestBody;

        private APItestInlineAdditionalPropertiesRequest(Map<String, String> requestBody) {
            this.requestBody = requestBody;
        }

        /**
         * Build call for testInlineAdditionalProperties
         * @param progressListener Progress listener
         * @param progressRequestListener Progress request listener
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public com.squareup.okhttp.Call buildCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
            return testInlineAdditionalPropertiesCall(requestBody, progressListener, progressRequestListener);
        }

        /**
         * Execute testInlineAdditionalProperties request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public void execute() throws ApiException {
            testInlineAdditionalPropertiesWithHttpInfo(requestBody);
        }

        /**
         * Execute testInlineAdditionalProperties request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return testInlineAdditionalPropertiesWithHttpInfo(requestBody);
        }

        /**
         * Execute testInlineAdditionalProperties request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public com.squareup.okhttp.Call executeAsync(final ApiCallback<Void> callback) throws ApiException {
            return testInlineAdditionalPropertiesAsync(requestBody, callback);
        }
    }

    /**
     * test inline additionalProperties
     * 
     * @param requestBody request body (required)
     * @return APItestInlineAdditionalPropertiesRequest
     */
    public APItestInlineAdditionalPropertiesRequest testInlineAdditionalProperties(Map<String, String> requestBody) {
        return new APItestInlineAdditionalPropertiesRequest(requestBody);
    }
    private com.squareup.okhttp.Call testJsonFormDataCall(String param, String param2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/fake/jsonFormData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (param != null) {
            localVarFormParams.put("param", param);
        }

        if (param2 != null) {
            localVarFormParams.put("param2", param2);
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call testJsonFormDataValidateBeforeCall(String param, String param2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'param' is set
        if (param == null) {
            throw new ApiException("Missing the required parameter 'param' when calling testJsonFormData(Async)");
        }
        
        // verify the required parameter 'param2' is set
        if (param2 == null) {
            throw new ApiException("Missing the required parameter 'param2' when calling testJsonFormData(Async)");
        }
        

        com.squareup.okhttp.Call call = testJsonFormDataCall(param, param2, progressListener, progressRequestListener);
        return call;

    }


    private ApiResponse<Void> testJsonFormDataWithHttpInfo(String param, String param2) throws ApiException {
        com.squareup.okhttp.Call call = testJsonFormDataValidateBeforeCall(param, param2, null, null);
        return apiClient.execute(call);
    }

    private com.squareup.okhttp.Call testJsonFormDataAsync(String param, String param2, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = testJsonFormDataValidateBeforeCall(param, param2, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    public class APItestJsonFormDataRequest {
        private final String param;
        private final String param2;

        private APItestJsonFormDataRequest(String param, String param2) {
            this.param = param;
            this.param2 = param2;
        }

        /**
         * Build call for testJsonFormData
         * @param progressListener Progress listener
         * @param progressRequestListener Progress request listener
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         */
        public com.squareup.okhttp.Call buildCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
            return testJsonFormDataCall(param, param2, progressListener, progressRequestListener);
        }

        /**
         * Execute testJsonFormData request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public void execute() throws ApiException {
            testJsonFormDataWithHttpInfo(param, param2);
        }

        /**
         * Execute testJsonFormData request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return testJsonFormDataWithHttpInfo(param, param2);
        }

        /**
         * Execute testJsonFormData request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         */
        public com.squareup.okhttp.Call executeAsync(final ApiCallback<Void> callback) throws ApiException {
            return testJsonFormDataAsync(param, param2, callback);
        }
    }

    /**
     * test json serialization of form data
     * 
     * @param param field1 (required)
     * @param param2 field2 (required)
     * @return APItestJsonFormDataRequest
     */
    public APItestJsonFormDataRequest testJsonFormData(String param, String param2) {
        return new APItestJsonFormDataRequest(param, param2);
    }
}
